// Generated by dts-bundle-generator v5.9.0

export declare namespace Random {
	/**
	 *
	 *
	 * @export
	 * @param {number} length the length constraint for each generated string
	 * @param {string} chars a string containing all characters to include
	 * @return {*}  {RandomString}
	 */
	function fromChars(length: number, chars: string): RandomString;
	/**
	 * Generates a random integer value from Number.MIN_SAFE_INTEGER (inclusive)
	 * to Number.MAX_SAFE_INTEGER (inclusive)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function int(): RandomInt;
	/**
	 * Genearates a random integer value between the provided min (inclusive)
	 * and max (inclusive) values
	 *
	 * @export
	 * @param {number} min
	 * @param {number} max
	 * @return {*}  {RandomInt}
	 */
	function int(min: number, max: number): RandomInt;
	/**
	 * Generates a random integer value between 0 and the provided max (inclusive) value
	 *
	 * @export
	 * @param {number} max
	 * @return {*}  {RandomInt}
	 */
	function int(max: number): RandomInt;
	/**
	 * Generates a random value that conforms to a signed
	 * 8-bit value (-128 to 127)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function int8(): RandomInt;
	/**
	 * Generates a random value that conforms to a signed
	 * 16-bit value (-32768 to 32767)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function int16(): RandomInt;
	/**
	 * Generates a random value that conforms to a signed
	 * 32-bit value (-2147483648 to 2147483647)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function int32(): RandomInt;
	/**
	 * Generates a random value that conforms to an unsigned
	 * 8-bit value (0 to 255)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function uint8(): RandomInt;
	/**
	 * Generates a random value that conforms to an unsigned
	 * 16-bit value (0 to 65535)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function uint16(): RandomInt;
	/**
	 * Generates a random value that conforms to an unsigned
	 * 32-bit value (0 to 4294967295)
	 *
	 * @export
	 * @return {*}  {RandomInt}
	 */
	function uint32(): RandomInt;
}
declare class RandomString {
	private readonly length;
	private readonly seed;
	constructor(length: number, seed: string);
	/**
	 * Generates a new randomized string value
	 *
	 * @return {*}  {string}
	 * @memberof RandomString
	 */
	nextString(): string;
}
declare class RandomInt {
	private readonly min;
	private readonly max;
	constructor(min: number, max: number);
	/**
	 * Generates a new random integer value
	 *
	 * @return {*}  {number}
	 * @memberof RandomInt
	 */
	nextInt(): number;
}

export {};
